createPlayer()
{
    const player = this.physics.add.sprite(100, 300, CAR).setScale(0.1)
    console.log(player.angle)
    player.setAngle(player.angle-270)
    console.log(player.angle)

    player.setCollideWorldBounds(true)
    this.newAction("right",0)
    this.newAction("turn left",1500)
    this.newAction("up",1600)
    this.newAction("turn left",3000)
    this.newAction("left",3100)
    this.newAction("turn left",4500)
    this.newAction("down",4600)
    return player
}

newAction(action, time){
    setTimeout(() => {
        this.player.setVelocityY(0)
        this.player.setVelocityX(0)
        if(action === "turn right"){
            this.player.setAngle(this.player.angle+90)
        }
        else if(action === "turn left" ){
            this.player.setAngle(this.player.angle-90)
        }		
        else if(action === "right" ){
            this.player.setVelocityX(160)
        }			
        else if(action === "left" ){
            this.player.setVelocityX(-160)
        }			
        else if(action === "up" ){
            this.player.setVelocityY(-160)
        }
        else if(action === "down" ){
            this.player.setVelocityY(160)
        }
      }, time);
}  

update()
{


    // check - Phaser also allows you to create more complex motions, with momentum and acceleration
    this.player.setVelocityX(0)
    this.player.setVelocityY(0)
    if (this.cursors.right.isDown && this.cursors.down.isDown)
    {
        this.player.setAngle(this.player.angle-90)
    }
    
    else if (this.cursors.right.isDown && this.cursors.up.isDown)
    {
        this.player.setAngle(this.player.angle-90)
    }
    else if (this.cursors.left.isDown && this.cursors.up.isDown)
    {
        this.player.setAngle(this.player.angle-90)
    }
    else if (this.cursors.left.isDown && this.cursors.down.isDown)
    {
        this.player.setAngle(this.player.angle-90)
        
    }
    else if (this.cursors.left.isDown)
    {
        this.player.setVelocityX(-160)
    }
    else if (this.cursors.right.isDown)
    {
        this.player.setVelocityX(160)
    }
    else if (this.cursors.up.isDown)
    {
        this.player.setVelocityY(-160)
    }
    else if (this.cursors.down.isDown)
    {
        this.player.setVelocityY(160)
    }
   
}


**********************

createObjects(data, key, flag, type)
	{

		

	
		// const stars = this.physics.add.group()
		// for (let i = 0; i < 12; i++){

		// 	let random_number = Phaser.Math.Between(1, 6)

		// 	let x = 39.75 +  Phaser.Math.Between(0, 5)*79.5
		// 	let y = 39.6 +35+ Phaser.Math.Between(0, 5)*79.2
		// 	let star = this.add.sprite(x, y, STAR)
		// 	star.setScale(0.1+random_number*0.03)
		// 	star.setTint(this.typeStars.get(random_number))
		// 	star.setName(random_number)
		// 	//let text = this.add.text(x,y, random_number, {font: "16px Arial", fill: "#ffffff"}).setOrigin(0.5,0.5);
		// 	stars.add(star)
		// 	//stars.addMultiple([star,text])

		// }

		// 0 <= x,y <=5
		
		
		const objects = this.physics.add.group({
			key: key,
			repeat: data.length - 1,
		})
		//console.log(objects.children.size)
		// let len = objects.children.size
		// for (var i = 0; i < len; i++) 
		// {  
		// 	console.log(i)
		// 	//console.log(objects.children.get(i));
		// 	let child = objects.children.get(i)
		// 	let data_child = data[i]
		// 	//console.log(data[i])
		// 	//let random_number = Phaser.Math.Between(1, 6)
		// 	//console.log(data, data_child)
		// 	child.setScale(0.1+data_child.id*scale)
		// 	child.setTint(type.get(data_child.id))
		// 	child.x = 39.75 +  data_child.x*79.5
		// 	child.y = 39.6 +35+data_child.y*79.2
		// 	child.setName(data_child.id)
		// 	console.log(i)

		// 	//console.log(child)
		
		// }
		// console.log(objects.getChildren())
		let i = 0;
		objects.children.iterate((child) => {
			// child.getIndexList() - start from 3
			let data_child = data[i]
			console.log(data)
			//let random_number = Phaser.Math.Between(1, 6)
			//console.log(data, data_child)
			if (flag){
				child.setScale(0.1+data_child.id*0.03)
				child.setTint(type.get(data_child.id))
			}
			else {
				child.setScale(0.1)
			}
			child.x = 39.75 +  data_child.x*79.5
			child.y = 39.6 +35+data_child.y*79.2
			child.setName(data_child.id)
			i++;
		})



		return objects
	}
***********

//star.visible = false
		//star.body.enable = false
		//console.log(object.name)